<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Casey Williams</title>
    <link>https://caseywilliams.me/posts/</link>
    <description>Recent content in Posts on Casey Williams</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 22 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://caseywilliams.me/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Is a Dynamic Array and How to Implement One in C</title>
      <link>https://caseywilliams.me/2017/what-is-a-dynamic-array-and-how-to-implement-one-in-c/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2017/what-is-a-dynamic-array-and-how-to-implement-one-in-c/</guid>
      <description>This guide has been written as a complete introduction to dynamic arrays, with comparisons against similar array types like dynamically allocated and fixed-size arrays, and also a tutorial on how to implement one in C.
 Link to the repository of code.   Prerequisites: you should have a basic understanding of pointers and some knowledge of programming in C.
Let’s get to it!
First let’s define an array. An array is a contiguous area of memory, consisting of equally sized elements, indexed by contiguous integers.</description>
    </item>
    
    <item>
      <title>Big O Notation and Algorithmic Complexity</title>
      <link>https://caseywilliams.me/2017/big-o-notation-and-algorithmic-complexity/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2017/big-o-notation-and-algorithmic-complexity/</guid>
      <description>After completing the first section of the coding-interview-university repository, algorithmic complexity / big o / asymptotic analysis, I’ve decided to write a quick tutorial on how it all works. So hopefully it may come in handy as a quick learning tool or reminder for myself, or even another person who comes across this post at a later date.
Let’s begin…
What is this all about? Big O notation and asymptotic complexity is all to do with how the number of operations an algorithm takes to complete, grows as the size of the input increases.</description>
    </item>
    
    <item>
      <title>Bric Text Editor</title>
      <link>https://caseywilliams.me/2017/bric-text-editor/</link>
      <pubDate>Sat, 15 Apr 2017 12:11:40 +0100</pubDate>
      
      <guid>https://caseywilliams.me/2017/bric-text-editor/</guid>
      <description>Github Repo The editor uses VT100 escpae sequences to write to the terminal to output characters and the cursor etc. It also uses the &amp;ldquo;alternate screen buffer&amp;rdquo;, which originated in xterm but is nowadays supported by most terminals. Alternate screen buffer is designed to provide exactly this functionality for full-screen terminal programs. In normal operation, output gets added to the scrollback buffer (and most terminals let the user scroll back to previous lines).</description>
    </item>
    
  </channel>
</rss>