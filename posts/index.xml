<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Casey Williams</title>
    <link>https://caseywilliams.me/posts/</link>
    <description>Recent content in Posts on Casey Williams</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 06 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://caseywilliams.me/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Listen to Youtube Livestreams From the Terminal</title>
      <link>https://caseywilliams.me/2020/listen-to-youtube-livestreams-from-the-terminal/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2020/listen-to-youtube-livestreams-from-the-terminal/</guid>
      <description>Like many people, while working I like to have some music on in the background. Normally this is either a Spotify playlist of my own, or some Youtube livestream of jazz, lofi or another genre that is mostly instrumental.
Also, I spend a lot of time in the terminal while working. Putting two and two together I thought it would be cool to be able to have a CLI to play the audio from different livestreams.</description>
    </item>
    
    <item>
      <title>Asciinema</title>
      <link>https://caseywilliams.me/2020/asciinema/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2020/asciinema/</guid>
      <description>I was looking for a tool to record my terminal output so I could show some example output of programs I had written for some friends.
After searching &amp;ldquo;record terminal output&amp;rdquo;, the first result to appear was Asciinema .
This post is just a quick overview of what you can do with Asciinema and why I like it.
Installation Installing Asciinema is super easy.
If you use Homebrew:
brew install asciinema Pip:</description>
    </item>
    
    <item>
      <title>Weekly Post Challenge</title>
      <link>https://caseywilliams.me/2020/weekly-post-challenge/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2020/weekly-post-challenge/</guid>
      <description>I recently set the home page of my browser to be Hacker News . I found it to be a distraction free way of finding out interesting stuff that&amp;rsquo;s happening in the tech industry. It&amp;rsquo;s also a really great way to find interesting blogs that aren&amp;rsquo;t on sites like Medium, as you&amp;rsquo;ll see from this post.
Anyway, today I came across a post called I bought netflix.soy , a fantastic blog post written by Ben Stokes .</description>
    </item>
    
    <item>
      <title>Deleting Social Media</title>
      <link>https://caseywilliams.me/2020/deleting-social-media/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2020/deleting-social-media/</guid>
      <description>I decided to delete all of my social media accounts. This post covers the reasons why I did this and what effects it had at different stages.
Why? One of the main reasons for doing this was to help my concentration levels. I’ve wanted to be able to invest time in more meaningful experiences lately (I’ve successfully done this with my Spanish learning however I’d like to have more time to read and do some projects and research) but I’ve found that with many things I tell myself: “I haven’t got time”.</description>
    </item>
    
    <item>
      <title>What Is a Dynamic Array and How to Implement One in C</title>
      <link>https://caseywilliams.me/2017/what-is-a-dynamic-array-and-how-to-implement-one-in-c/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2017/what-is-a-dynamic-array-and-how-to-implement-one-in-c/</guid>
      <description>This guide has been written as a complete introduction to dynamic arrays, with comparisons against similar array types like dynamically allocated and fixed-size arrays, and also a tutorial on how to implement one in C.
 Link to the repository of code.   Prerequisites: you should have a basic understanding of pointers and some knowledge of programming in C.
Let’s get to it!
First let’s define an array. An array is a contiguous area of memory, consisting of equally sized elements, indexed by contiguous integers.</description>
    </item>
    
    <item>
      <title>Big O Notation and Algorithmic Complexity</title>
      <link>https://caseywilliams.me/2017/big-o-notation-and-algorithmic-complexity/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://caseywilliams.me/2017/big-o-notation-and-algorithmic-complexity/</guid>
      <description>After completing the first section of the coding-interview-university repository, algorithmic complexity / big o / asymptotic analysis, I’ve decided to write a quick tutorial on how it all works. So hopefully it may come in handy as a quick learning tool or reminder for myself, or even another person who comes across this post at a later date.
Let’s begin…
What is this all about? Big O notation and asymptotic complexity is all to do with how the number of operations an algorithm takes to complete, grows as the size of the input increases.</description>
    </item>
    
    <item>
      <title>Bric Text Editor</title>
      <link>https://caseywilliams.me/2017/bric-text-editor/</link>
      <pubDate>Sat, 15 Apr 2017 12:11:40 +0100</pubDate>
      
      <guid>https://caseywilliams.me/2017/bric-text-editor/</guid>
      <description>Github Repo The editor uses VT100 escpae sequences to write to the terminal to output characters and the cursor etc. It also uses the &amp;ldquo;alternate screen buffer&amp;rdquo;, which originated in xterm but is nowadays supported by most terminals. Alternate screen buffer is designed to provide exactly this functionality for full-screen terminal programs. In normal operation, output gets added to the scrollback buffer (and most terminals let the user scroll back to previous lines).</description>
    </item>
    
  </channel>
</rss>